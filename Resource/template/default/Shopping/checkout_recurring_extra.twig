{#
This file is part of EC-CUBE

Copyright(c) EC-CUBE CO.,LTD. All Rights Reserved.

http://www.ec-cube.co.jp/

For the full copyright and license information, please view the LICENSE
file that was distributed with this source code.
#}
{% extends 'default_frame.twig' %}

{% block javascript %}
    {{ include('StripePaymentGateway/Resource/assets/css/base.css.twig') }}
    {{ include('StripePaymentGateway/Resource/assets/css/stripe_4.css.twig') }}
    {{ include('StripeRec/Resource/assets/css/checkout.css.twig') }}
{% endblock javascript %}


{% block stylesheet %}
<style>
.input-element {
    padding: 10px !important;
    border: 1px solid #ccc;
    border-radius: 5px;
}
.half-width {
    width: 50%;
}
</style>
{% endblock %}

{% block main %}

    <div class="ec-role">
        <div class="ec-pageHeader">
            <h1>{{ '支払い'|trans }}</h1>
        </div>
    </div>
    <main>
      <section class="container-lg">
        <div class="cell example example4" id="example-4">
          <form action="{{ url('plugin_stripe_rec_extra_pay', {'id' : recOrder.id, 'stamp' : recOrder.ManualLinkStamp }) }}" method="POST" id="checkout_form">
            {# <input type="hidden" name="payment_intent_id"> #}
            <div id="example4-paymentRequest">
              <!--Stripe paymentRequestButton Element inserted here-->
            </div>
            <div>
              <legend class="payment-request-available" data-tid="elements_examples.form.enter_card_manually">カードでお支払い</legend>
              <div class="container">
                {# <div id="example4-card"></div> #}
                <div class="row" style="margin-bottom: 10px;">
                    <div class="field input-element">
                        <div id="example2-card-number"></div>
                    </div>
                </div>
                <div class="row" style="display: flex;">
                    <div class="half-width">
                        <div class="field input-element" style="margin-right: 10px;">
                            <div id="example2-card-expiry" class="input empty"></div>
                        </div>
                    </div>
                    <div class="half-width">
                        <div class="field input-element">
                            <div id="example2-card-cvc" class="input empty"></div>
                        </div>
                    </div>
                </div>
                <button type="button" class="pay-button stripe_payment_gateway_payment_btn" data-tid="elements_examples.form.donate_button">新しいカードで支払う({{ amount|price }})</button>
              </div>
              <div class="stripe-save-card-checkbox-wrapper">
                <input type="checkbox" name="is_save_on" class="stripe-save-card-checkbox" checked>{{ 'stripe_payment_gateway.front.save_card'|trans }}
              </div>
            </div>
            <div class="error" role="alert">
              <svg xmlns="http://www.w3.org/2000/svg" width="17" height="17" viewBox="0 0 17 17">
                <path class="base" fill="#000" d="M8.5,17 C3.80557963,17 0,13.1944204 0,8.5 C0,3.80557963 3.80557963,0 8.5,0 C13.1944204,0 17,3.80557963 17,8.5 C17,13.1944204 13.1944204,17 8.5,17 Z"></path>
                <path class="glyph" fill="#FFF" d="M8.5,7.29791847 L6.12604076,4.92395924 C5.79409512,4.59201359 5.25590488,4.59201359 4.92395924,4.92395924 C4.59201359,5.25590488 4.59201359,5.79409512 4.92395924,6.12604076 L7.29791847,8.5 L4.92395924,10.8739592 C4.59201359,11.2059049 4.59201359,11.7440951 4.92395924,12.0760408 C5.25590488,12.4079864 5.79409512,12.4079864 6.12604076,12.0760408 L8.5,9.70208153 L10.8739592,12.0760408 C11.2059049,12.4079864 11.7440951,12.4079864 12.0760408,12.0760408 C12.4079864,11.7440951 12.4079864,11.2059049 12.0760408,10.8739592 L9.70208153,8.5 L12.0760408,6.12604076 C12.4079864,5.79409512 12.4079864,5.25590488 12.0760408,4.92395924 C11.7440951,4.59201359 11.2059049,4.59201359 10.8739592,4.92395924 L8.5,7.29791847 L8.5,7.29791847 Z"></path>
              </svg>
              <span class="message"></span>
            </div>
          </form>
          <div class="success">
            <div class="icon">
              <svg width="84px" height="84px" viewBox="0 0 84 84" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                <circle class="border" cx="42" cy="42" r="40" stroke-linecap="round" stroke-width="4" stroke="#000" fill="none"></circle>
                <path class="checkmark" stroke-linecap="round" stroke-linejoin="round" d="M23.375 42.5488281 36.8840688 56.0578969 64.891932 28.0500338" stroke-width="4" stroke="#000" fill="none"></path>
              </svg>
            </div>
            <h3 class="title" data-tid="elements_examples.success.title">支払い成功</h3>
            <p class="message"><span data-tid="elements_examples.success.message">ご注文いただきありがとうございます。</span></p>
            <a class="reset" href="#">
              <svg width="32px" height="32px" viewBox="0 0 32 32" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                <path fill="#000000" d="M15,7.05492878 C10.5000495,7.55237307 7,11.3674463 7,16 C7,20.9705627 11.0294373,25 16,25 C20.9705627,25 25,20.9705627 25,16 C25,15.3627484 24.4834055,14.8461538 23.8461538,14.8461538 C23.2089022,14.8461538 22.6923077,15.3627484 22.6923077,16 C22.6923077,19.6960595 19.6960595,22.6923077 16,22.6923077 C12.3039405,22.6923077 9.30769231,19.6960595 9.30769231,16 C9.30769231,12.3039405 12.3039405,9.30769231 16,9.30769231 L16,12.0841673 C16,12.1800431 16.0275652,12.2738974 16.0794108,12.354546 C16.2287368,12.5868311 16.5380938,12.6540826 16.7703788,12.5047565 L22.3457501,8.92058924 L22.3457501,8.92058924 C22.4060014,8.88185624 22.4572275,8.83063012 22.4959605,8.7703788 C22.6452866,8.53809377 22.5780351,8.22873685 22.3457501,8.07941076 L22.3457501,8.07941076 L16.7703788,4.49524351 C16.6897301,4.44339794 16.5958758,4.41583275 16.5,4.41583275 C16.2238576,4.41583275 16,4.63969037 16,4.91583275 L16,7 L15,7 L15,7.05492878 Z M16,32 C7.163444,32 0,24.836556 0,16 C0,7.163444 7.163444,0 16,0 C24.836556,0 32,7.163444 32,16 C32,24.836556 24.836556,32 16,32 Z"></path>
              </svg>
            </a>
          </div>
        </div>
      </section>
    </main>
    <style>
    .stripe_payment_gateway_text{
        font-weight: bold!important;
        margin-bottom: 10px!important;
    }
    
    .stripe_payment_gateway_payment_btn{
        margin-top: 10px!important;
        background: #8c8c8c!important;
        height: auto!important;
        padding: 20px!important;
    }
    .stripe_payment_gateway_payment_btn:hover{
        background: #656565!important;
    }
    
    </style>
<script src="https://js.stripe.com/v3/"></script>
<script>
    'use strict'
    var stripe = Stripe("{{ stripeConfig.publishable_key }}");
    
    
    function registerElements(elements, exampleName, paymentRequest = null){
        var formClass = '.' + exampleName;
        var example = document.querySelector(formClass);

        var form = example.querySelector('form');
        var resetButton = example.querySelector('a.reset');
        var error = form.querySelector('.error');
        var errorMessage = error.querySelector('.message');

        {% if already_paid is defined and already_paid == true %}
            example.classList.add('submitted');
        {% endif %}

        const toCurrency = function(n, curr, LanguageFormat = undefined){                
            return Intl.NumberFormat(LanguageFormat, { style: 'currency', currency: curr }).format(n);
        }
        function enableInputs() {
            Array.prototype.forEach.call(
            form.querySelectorAll(
                "input[type='text'], input[type='email'], input[type='tel']"
            ),
            function(input) {
                input.removeAttribute('disabled');
            }
            );
        }
        function disableInputs() {
            Array.prototype.forEach.call(
                form.querySelectorAll(
                    "input[type='text'], input[type='email'], input[type='tel']"
                ),
                function(input) {
                    input.setAttribute('disabled', 'true');
                }
            );
        }
        function triggerBrowserValidation() {
            // The only way to trigger HTML5 form validation UI is to fake a user submit
            // event.
            var submit = document.createElement('input');
            submit.type = 'submit';
            submit.style.display = 'none';
            form.appendChild(submit);
            submit.click();
            submit.remove();
        }
        function stripePaymentHandler(payment_method_id) {
            loadingOverlay("show");
            var is_save_on = $("input[name='is_save_on']").prop("checked");

            $.ajax({
                type: 'POST',
                data: {
                    payment_method_id   : payment_method_id,
                    is_save_on          : is_save_on
                },
                url: '{{ url("plugin_stripe_rec_extra_pay_intent", { 'id': recOrder.id }) }}',
                success: function(data){
                    loadingOverlay("hide")

                    if(data.error){
                        console.log("pay handler error")
                        showError(data.message)
                    }else{
                        console.log("pay handler success")
                        stripeResponseHandler(data);
                    }
                },
                error: function(error) {
                    console.log(error)
                    loadingOverlay('hide')
                }
            })
        }
        function stripeResponseHandler(response) {
            switch(response.action) {
                case 'requires_new_card':
                    showError(response.message)
                    return;
                case 'requires_action':
                    stripeCardActionHandler(response.client_secret);
                    return;
                case 'requires_capture':                
                    stripeReadyHandler(response.payment_intent_id);
                    return;
            }
        }
        function stripeCardActionHandler(client_secret) {
            stripe.confirmCardPayment(
                client_secret
            ).then( function(result) {
                if(result.error) {
                    getStripeErrorMessage(result.error);
                    example.classList.remove('submitting')
                    enableInputs();
                } else {
                    stripeReadyHandler(result.paymentIntent.id);
                }
            });
        }
        function stripeReadyHandler(paymentIntentId) {
            loadingOverlay("show");
            
            $.ajax({
                type: 'POST',
                data: {
                    payment_intent_id   : paymentIntentId,
                },
                url: $(form).attr('action'),
                success: function(data){
                    loadingOverlay("hide")

                    if(data.error){
                        console.log("pay handler error")
                        showError(data.message)
                    }else{
                        example.classList.add('submitted');
                    }
                },
                error: function(error) {
                    console.log(error)
                    loadingOverlay('hide')
                }
            })
        }
        

        // Listen for errors from each Element, and show error messages in the UI.
        var savedErrors = {};
        elements.forEach(function(element, idx) {
            element.on('change', function(event) {
            if (event.error) {
                error.classList.add('visible');
                savedErrors[idx] = event.error.message;
                errorMessage.innerText = event.error.message;
            } else {
                savedErrors[idx] = null;

                // Loop over the saved errors and find the first one, if any.
                var nextError = Object.keys(savedErrors)
                .sort()
                .reduce(function(maybeFoundError, key) {
                    return maybeFoundError || savedErrors[key];
                }, null);

                if (nextError) {
                // Now that they've fixed the current error, show another one.
                errorMessage.innerText = nextError;
                } else {
                // The user fixed the last error; no more errors.
                error.classList.remove('visible');
                }
            }
            });
        });
        var showError = function(message){
            error.classList.add('visible');
            errorMessage.innerText = message;
            enableInputs();
            example.classList.remove('submitting');
            loadingOverlay('hide');
        }
        function getStripeErrorMessage(error) {
            var message = '';
            var type = error.type;
            var code = error.code;
            message = error.message;
            
            switch(code) {
                case 'card_declined':
                    message = 'カードを請求できませんでした。';
                    break;
                case 'payment_intent_authentication_failure':
                    message = 'カード認証に失敗しました。ご確認の上再度ご入力ください。';
                    break;
            }
            showError(message);
        }
        if(paymentRequest){
            paymentRequest.on('paymentmethod', function(ev){
                stripePaymentHandler(ev.paymentMethod.id);
            })
        }
        
        var pay_button = $(".pay-button")
        // Listen on the form's 'submit' handler...
        // form.addEventListener('submit', function(e) {
        pay_button.on('click', function(e) {
            e.preventDefault();

            // Trigger HTML5 validation UI on the form if any of the inputs fail
            // validation.
            var plainInputsValid = true;
            Array.prototype.forEach.call(form.querySelectorAll('input'), function(
            input
            ) {
            if (input.checkValidity && !input.checkValidity()) {
                plainInputsValid = false;
                return;
            }
            });
            if (!plainInputsValid) {
            triggerBrowserValidation();
            return;
            }
            
            // Show a loading screen...
            example.classList.add('submitting');

            // Disable all inputs.
            disableInputs();

            stripe.createPaymentMethod({
            type: 'card',
            card: elements[0],
            }).then( function (result) {
                if ( result.error ){
                    showError(result.error.message)
                }else{
                    stripePaymentHandler(result.paymentMethod.id);
                }
            })
        })
    }
    var elements = stripe.elements({
        fonts: [
        {
            cssSrc: "https://rsms.me/inter/inter-ui.css"
        }
        ],
        // Stripe's examples are localized to specific languages, but if
        // you wish to have Elements automatically detect your user's locale,
        // use `locale: 'auto'` instead.
        locale: window.__exampleLocale
    });

    /**
    * Card Element
    */
    {# var card = elements.create("card", {
        style: {
        base: {
            color: "#32325D",
            fontWeight: 500,
            fontFamily: "Inter UI, Open Sans, Segoe UI, sans-serif",
            fontSize: "16px",
            fontSmoothing: "antialiased",

            "::placeholder": {
            color: "#CFD7DF"
            }
        },
        invalid: {
            color: "#E25950"
        }
        },
        hidePostalCode: true
    });

    card.mount("#example4-card"); #}

    var elementStyles = {
        base: {
        color: '#32325D',
        fontWeight: 500,
        fontFamily: 'Source Code Pro, Consolas, Menlo, monospace',
        fontSize: '16px',
        fontSmoothing: 'antialiased',

        '::placeholder': {
            color: '#CFD7DF',
        },
        ':-webkit-autofill': {
            color: '#e39f48',
        },
        },
        invalid: {
        color: '#E25950',

        '::placeholder': {
            color: '#FFCCA5',
        },
        },
    };

    var elementClasses = {
        focus: 'focused',
        empty: 'empty',
        invalid: 'invalid',
    };
    var cardNumber = elements.create('cardNumber', {
        style: elementStyles,
        classes: elementClasses,
    });
    cardNumber.mount('#example2-card-number');

    var cardExpiry = elements.create('cardExpiry', {
        style: elementStyles,
        classes: elementClasses,
    });
    cardExpiry.mount('#example2-card-expiry');

    var cardCvc = elements.create('cardCvc', {
        style: elementStyles,
        classes: elementClasses,
    });
    cardCvc.mount('#example2-card-cvc');

    {% if stripeConfig.checkout_ga_enable == true %}
    /**
    * Payment Request Element
    */
    var paymentRequest = stripe.paymentRequest({
        country: "JP",
        currency: "{{ recOrder.Order.CurrencyCode|lower }}",
        total: {
        amount: {{ amount }},
        label: "支払い"
        }
    });
    // paymentRequest.on("token", function(result) {
    //   var example = document.querySelector(".example4");
    //   example.querySelector(".token").innerText = result.token.id;
    //   example.classList.add("submitted");
    //   result.complete("success");
    // });

    var paymentRequestElement = elements.create("paymentRequestButton", {
        paymentRequest: paymentRequest,
        // style: {
        //   paymentRequestButton: {
        //     type: "donate"
        //   }
        // }
    });

    paymentRequest.canMakePayment().then(function(result) {
        if (result) {
        // document.querySelector(".example4 .card-only").style.display = "none";
        document.querySelector(
            ".example4 .payment-request-available"
        ).style.display =
            "block";
        paymentRequestElement.mount("#example4-paymentRequest");
        }
    });

    registerElements([card, cardExpiry, cardCvc, paymentRequestElement], "example4", paymentRequest);
    {% else %}
        registerElements([card, cardExpiry, cardCvc], "example4", null);
    {% endif %}
    
</script>
{% endblock %}
